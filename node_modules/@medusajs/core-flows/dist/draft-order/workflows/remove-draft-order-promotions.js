"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeDraftOrderPromotionsWorkflow = exports.removeDraftOrderPromotionsWorkflowId = void 0;
const utils_1 = require("@medusajs/framework/utils");
const workflows_sdk_1 = require("@medusajs/framework/workflows-sdk");
const common_1 = require("../../common");
const order_1 = require("../../order");
const validate_draft_order_change_1 = require("../steps/validate-draft-order-change");
const validate_promo_codes_to_remove_1 = require("../steps/validate-promo-codes-to-remove");
const fields_1 = require("../utils/fields");
const refresh_draft_order_adjustments_1 = require("./refresh-draft-order-adjustments");
exports.removeDraftOrderPromotionsWorkflowId = "remove-draft-order-promotions";
exports.removeDraftOrderPromotionsWorkflow = (0, workflows_sdk_1.createWorkflow)(exports.removeDraftOrderPromotionsWorkflowId, function (input) {
    const order = (0, common_1.useRemoteQueryStep)({
        entry_point: "orders",
        fields: fields_1.draftOrderFieldsForRefreshSteps,
        variables: {
            id: input.order_id,
        },
        list: false,
        throw_if_key_not_found: true,
    }).config({ name: "order-query" });
    const orderChange = (0, common_1.useRemoteQueryStep)({
        entry_point: "order_change",
        fields: ["id", "status"],
        variables: {
            filters: {
                order_id: input.order_id,
                status: [utils_1.OrderChangeStatus.PENDING, utils_1.OrderChangeStatus.REQUESTED],
            },
        },
        list: false,
    }).config({ name: "order-change-query" });
    (0, validate_draft_order_change_1.validateDraftOrderChangeStep)({ order, orderChange });
    const promotions = (0, common_1.useRemoteQueryStep)({
        entry_point: "promotion",
        fields: ["id", "code", "status"],
        variables: {
            filters: {
                code: input.promo_codes,
            },
        },
        list: true,
    }).config({ name: "promotions-query" });
    (0, validate_promo_codes_to_remove_1.validatePromoCodesToRemoveStep)({
        promo_codes: input.promo_codes,
        promotions,
    });
    refresh_draft_order_adjustments_1.refreshDraftOrderAdjustmentsWorkflow.runAsStep({
        input: {
            order,
            promo_codes: input.promo_codes,
            action: utils_1.PromotionActions.REMOVE,
        },
    });
    const orderChangeActionInput = (0, workflows_sdk_1.transform)({ order, orderChange, promotions }, ({ order, orderChange, promotions }) => {
        return promotions.map((promotion) => ({
            action: utils_1.ChangeActionType.PROMOTION_REMOVE,
            reference: "order_promotion",
            order_change_id: orderChange.id,
            reference_id: promotion.id,
            order_id: order.id,
            details: {
                removed_code: promotion.code,
            },
        }));
    });
    order_1.createOrderChangeActionsWorkflow.runAsStep({
        input: orderChangeActionInput,
    });
    return new workflows_sdk_1.WorkflowResponse((0, order_1.previewOrderChangeStep)(input.order_id));
});
//# sourceMappingURL=remove-draft-order-promotions.js.map