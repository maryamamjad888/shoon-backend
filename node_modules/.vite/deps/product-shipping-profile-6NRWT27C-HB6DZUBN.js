import {
  PRODUCT_DETAIL_FIELDS
} from "./chunk-ABEJQIGN.js";
import {
  useComboboxData
} from "./chunk-CFEMRZCK.js";
import {
  Combobox
} from "./chunk-UFD6NJM2.js";
import "./chunk-EGRHWZRV.js";
import {
  KeyboundForm
} from "./chunk-DP54EP6X.js";
import {
  RouteDrawer,
  useRouteModal
} from "./chunk-CA5LVJCN.js";
import "./chunk-OPDDEIOG.js";
import "./chunk-XTUBI7HC.js";
import "./chunk-GDY5GCSF.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-OCQCFK6H.js";
import "./chunk-YM3FRBGU.js";
import "./chunk-7M4ICL3D.js";
import "./chunk-RQF55WOK.js";
import "./chunk-5QX4V4M4.js";
import "./chunk-XGFC5LFP.js";
import "./chunk-IA4ROPJA.js";
import "./chunk-GER2PJ73.js";
import {
  t
} from "./chunk-4LBU4M4V.js";
import {
  objectType,
  stringType
} from "./chunk-4XXECALA.js";
import "./chunk-GXU2SVLR.js";
import "./chunk-FTD3ZWHZ.js";
import "./chunk-XQHE2BW5.js";
import "./chunk-KYRT4F5Z.js";
import "./chunk-FDXEGDZG.js";
import "./chunk-GEABDW7Z.js";
import "./chunk-RAJ42U22.js";
import "./chunk-NV2N3EWM.js";
import "./chunk-LBNYM3GN.js";
import "./chunk-7UAYECTW.js";
import "./chunk-Y3NYV3NU.js";
import "./chunk-MPXR7HT5.js";
import {
  Form,
  useForm
} from "./chunk-VSS5ZM6Y.js";
import "./chunk-3DT2FZXW.js";
import "./chunk-A4ARU6BT.js";
import "./chunk-UGKAV6OK.js";
import "./chunk-NQ6OFW5G.js";
import "./chunk-2KBC7L4Y.js";
import "./chunk-WHJEN3NL.js";
import "./chunk-TG6GNXKT.js";
import "./chunk-J2QRB6RH.js";
import "./chunk-L2CW3JNT.js";
import "./chunk-YA26TLVF.js";
import "./chunk-CDZSKD67.js";
import "./chunk-F5GNXO2D.js";
import "./chunk-PN75AFAY.js";
import "./chunk-XMJUJWGZ.js";
import "./chunk-EVZYQIH5.js";
import "./chunk-52OFKTID.js";
import "./chunk-JGIVVN2A.js";
import "./chunk-AYA2KJ7E.js";
import "./chunk-GR3UFGPW.js";
import "./chunk-HI27CA54.js";
import "./chunk-F33AANCC.js";
import "./chunk-TKTW6E4H.js";
import "./chunk-ZCCGJOHC.js";
import "./chunk-Y4RTT7KM.js";
import "./chunk-S43SHPVA.js";
import "./chunk-7C4W3P35.js";
import {
  useProduct,
  useUpdateProduct
} from "./chunk-3AVUBQDF.js";
import "./chunk-VMLNCWLE.js";
import "./chunk-CUPZIPFX.js";
import {
  sdk
} from "./chunk-SLMEIFPT.js";
import {
  useTranslation
} from "./chunk-7HWTQOXJ.js";
import "./chunk-XMKQFEQ4.js";
import {
  useParams
} from "./chunk-T7YBVUWZ.js";
import {
  Button,
  Heading,
  toast
} from "./chunk-EVRJMGYM.js";
import "./chunk-5GLF3XJW.js";
import "./chunk-RPCDYKBN.js";
import "./chunk-H6RKTHDF.js";
import "./chunk-R35JBZ3G.js";
import {
  require_jsx_runtime
} from "./chunk-KBTYAULA.js";
import {
  require_react
} from "./chunk-QCHXOAYK.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/product-shipping-profile-6NRWT27C.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var ProductShippingProfileSchema = objectType({
  shipping_profile_id: stringType()
});
var ProductShippingProfileForm = ({
  product
}) => {
  var _a;
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const shippingProfiles = useComboboxData({
    queryKey: ["shipping_profiles"],
    queryFn: (params) => sdk.admin.shippingProfile.list(params),
    getOptions: (data) => data.shipping_profiles.map((shippingProfile) => ({
      label: shippingProfile.name,
      value: shippingProfile.id
    }))
  });
  const form = useForm({
    defaultValues: {
      shipping_profile_id: ((_a = product.shipping_profile) == null ? void 0 : _a.id) ?? ""
    },
    resolver: t(ProductShippingProfileSchema)
  });
  const selectedShippingProfile = form.watch("shipping_profile_id");
  const { mutateAsync, isPending } = useUpdateProduct(product.id);
  const handleSubmit = form.handleSubmit(async (data) => {
    await mutateAsync(
      {
        shipping_profile_id: data.shipping_profile_id === "" ? null : data.shipping_profile_id
      },
      {
        onSuccess: ({ product: product2 }) => {
          toast.success(
            t2("products.shippingProfile.edit.toasts.success", {
              title: product2.title
            })
          );
          handleSuccess();
        },
        onError: (error) => {
          toast.error(error.message);
        }
      }
    );
  });
  (0, import_react.useEffect)(() => {
    if (typeof selectedShippingProfile === "undefined") {
      form.setValue("shipping_profile_id", "");
    }
  }, [selectedShippingProfile]);
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(KeyboundForm, { onSubmit: handleSubmit, className: "flex h-full flex-col", children: [
    (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { children: (0, import_jsx_runtime.jsx)("div", { className: "flex h-full flex-col gap-y-4", children: (0, import_jsx_runtime.jsx)(
      Form.Field,
      {
        control: form.control,
        name: "shipping_profile_id",
        render: ({ field }) => {
          return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
            (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("products.fields.shipping_profile.label") }),
            (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
              Combobox,
              {
                ...field,
                allowClear: true,
                options: shippingProfiles.options,
                searchValue: shippingProfiles.searchValue,
                onSearchValueChange: shippingProfiles.onSearchValueChange,
                fetchNextPage: shippingProfiles.fetchNextPage
              }
            ) }),
            (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
          ] });
        }
      }
    ) }) }),
    (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
      (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: t2("actions.cancel") }) }),
      (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "submit", isLoading: isPending, children: t2("actions.save") })
    ] }) })
  ] }) });
};
var ProductShippingProfile = () => {
  const { id } = useParams();
  const { t: t2 } = useTranslation();
  const { product, isLoading, isError, error } = useProduct(id, {
    fields: PRODUCT_DETAIL_FIELDS
  });
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime2.jsx)(RouteDrawer.Header, { children: (0, import_jsx_runtime2.jsx)(RouteDrawer.Title, { asChild: true, children: (0, import_jsx_runtime2.jsx)(Heading, { children: t2("products.shippingProfile.edit.header") }) }) }),
    !isLoading && product && (0, import_jsx_runtime2.jsx)(ProductShippingProfileForm, { product })
  ] });
};
export {
  ProductShippingProfile as Component
};
//# sourceMappingURL=product-shipping-profile-6NRWT27C-HB6DZUBN.js.map
