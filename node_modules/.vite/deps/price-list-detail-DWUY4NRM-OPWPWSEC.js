import {
  ListSummary
} from "./chunk-GG4HEQ5C.js";
import {
  useDeletePriceListAction
} from "./chunk-PCQ7T73U.js";
import {
  getPriceListStatus
} from "./chunk-DC7EOWEK.js";
import "./chunk-EG6IR476.js";
import {
  DateRangeDisplay
} from "./chunk-U22FYANA.js";
import {
  useProductTableColumns
} from "./chunk-EK337MJ4.js";
import {
  useProductTableQuery
} from "./chunk-3M3PHA2D.js";
import "./chunk-ZMUKJRJ4.js";
import "./chunk-27WTJHVQ.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-S5JEKJNE.js";
import {
  _DataTable,
  useDataTable
} from "./chunk-2DQJANIC.js";
import "./chunk-BH6TYF7Y.js";
import "./chunk-LKEV5PTT.js";
import "./chunk-YIZEQTZW.js";
import {
  TwoColumnPage
} from "./chunk-EDW5BHFB.js";
import "./chunk-EZLR4STK.js";
import "./chunk-32T72GVU.js";
import {
  useProductTableFilters
} from "./chunk-RX7YN25D.js";
import "./chunk-75CD25PZ.js";
import "./chunk-QX6SXRUW.js";
import "./chunk-7ANVLPZR.js";
import "./chunk-DHKOEHSD.js";
import "./chunk-GXU2SVLR.js";
import {
  useExtension
} from "./chunk-FTD3ZWHZ.js";
import {
  Skeleton,
  TwoColumnPageSkeleton
} from "./chunk-XQHE2BW5.js";
import {
  ActionMenu
} from "./chunk-FDXEGDZG.js";
import "./chunk-GEABDW7Z.js";
import "./chunk-RAJ42U22.js";
import "./chunk-NV2N3EWM.js";
import "./chunk-LBNYM3GN.js";
import "./chunk-7UAYECTW.js";
import "./chunk-Y3NYV3NU.js";
import "./chunk-MPXR7HT5.js";
import "./chunk-3DT2FZXW.js";
import "./chunk-A4ARU6BT.js";
import "./chunk-UGKAV6OK.js";
import "./chunk-NQ6OFW5G.js";
import "./chunk-2KBC7L4Y.js";
import "./chunk-WHJEN3NL.js";
import "./chunk-TG6GNXKT.js";
import "./chunk-J2QRB6RH.js";
import "./chunk-L2CW3JNT.js";
import "./chunk-YA26TLVF.js";
import "./chunk-CDZSKD67.js";
import "./chunk-F5GNXO2D.js";
import "./chunk-PN75AFAY.js";
import {
  priceListsQueryKeys,
  usePriceList,
  usePriceListLinkProducts
} from "./chunk-XMJUJWGZ.js";
import {
  useCustomerGroups
} from "./chunk-EVZYQIH5.js";
import "./chunk-52OFKTID.js";
import "./chunk-JGIVVN2A.js";
import "./chunk-AYA2KJ7E.js";
import "./chunk-GR3UFGPW.js";
import "./chunk-HI27CA54.js";
import "./chunk-F33AANCC.js";
import "./chunk-TKTW6E4H.js";
import "./chunk-ZCCGJOHC.js";
import "./chunk-Y4RTT7KM.js";
import "./chunk-S43SHPVA.js";
import "./chunk-7C4W3P35.js";
import {
  useProducts
} from "./chunk-3AVUBQDF.js";
import {
  queryClient
} from "./chunk-VMLNCWLE.js";
import "./chunk-CUPZIPFX.js";
import {
  sdk
} from "./chunk-SLMEIFPT.js";
import {
  useTranslation
} from "./chunk-7HWTQOXJ.js";
import "./chunk-XMKQFEQ4.js";
import {
  useNavigate,
  useParams
} from "./chunk-T7YBVUWZ.js";
import {
  Checkbox,
  Container,
  Heading,
  PencilSquare,
  Plus,
  StatusBadge,
  Text,
  Trash,
  createColumnHelper,
  toast,
  usePrompt
} from "./chunk-EVRJMGYM.js";
import "./chunk-5GLF3XJW.js";
import "./chunk-RPCDYKBN.js";
import "./chunk-H6RKTHDF.js";
import {
  keepPreviousData
} from "./chunk-R35JBZ3G.js";
import {
  require_jsx_runtime
} from "./chunk-KBTYAULA.js";
import {
  require_react
} from "./chunk-QCHXOAYK.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/price-list-detail-DWUY4NRM.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var PriceListDetailBreadcrumb = (props) => {
  const { id } = props.params || {};
  const { price_list } = usePriceList(id, void 0, {
    initialData: props.data,
    enabled: Boolean(id)
  });
  if (!price_list) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)("span", { children: price_list.title });
};
var pricingDetailQuery = (id) => ({
  queryKey: priceListsQueryKeys.detail(id),
  queryFn: async () => sdk.admin.priceList.retrieve(id)
});
var pricingLoader = async ({ params }) => {
  const id = params.id;
  const query = pricingDetailQuery(id);
  return queryClient.ensureQueryData(query);
};
var PriceListConfigurationSection = ({
  priceList
}) => {
  const { t } = useTranslation();
  return (0, import_jsx_runtime2.jsxs)(Container, { className: "flex flex-col gap-y-4", children: [
    (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center justify-between", children: [
      (0, import_jsx_runtime2.jsxs)("div", { children: [
        (0, import_jsx_runtime2.jsx)(Heading, { level: "h2", children: t("priceLists.configuration.header") }),
        (0, import_jsx_runtime2.jsx)(CustomerGroupDisplay, { priceList })
      ] }),
      (0, import_jsx_runtime2.jsx)(
        ActionMenu,
        {
          groups: [
            {
              actions: [
                {
                  label: t("actions.edit"),
                  to: "configuration",
                  icon: (0, import_jsx_runtime2.jsx)(PencilSquare, {})
                }
              ]
            }
          ]
        }
      )
    ] }),
    (0, import_jsx_runtime2.jsx)(
      DateRangeDisplay,
      {
        endsAt: priceList.ends_at,
        startsAt: priceList.starts_at,
        showTime: true
      }
    )
  ] });
};
var CustomerGroupDisplay = ({
  priceList
}) => {
  const { t } = useTranslation();
  const customerGroupIds = priceList.rules["customer.groups.id"];
  const { customer_groups, isPending, isError, error } = useCustomerGroups(
    {
      id: customerGroupIds
    },
    {
      enabled: !!(customerGroupIds == null ? void 0 : customerGroupIds.length)
    }
  );
  if (isError) {
    throw error;
  }
  if (!(customerGroupIds == null ? void 0 : customerGroupIds.length)) {
    return null;
  }
  if (isPending || !customer_groups) {
    return (0, import_jsx_runtime2.jsx)(Skeleton, { className: "h-5 w-full max-w-48" });
  }
  return (0, import_jsx_runtime2.jsxs)("div", { className: "txt-small-plus text-ui-fg-muted flex items-center gap-x-1.5", children: [
    (0, import_jsx_runtime2.jsx)("span", { className: "text-ui-fg-subtle", children: t("priceLists.fields.customerAvailability.attribute") }),
    (0, import_jsx_runtime2.jsx)("span", { children: "Â·" }),
    (0, import_jsx_runtime2.jsx)(
      ListSummary,
      {
        list: customer_groups.map((group) => group.name),
        n: 1,
        className: "txt-small-plus text-ui-fg-muted"
      }
    )
  ] });
};
var PriceListGeneralSection = ({
  priceList
}) => {
  var _a;
  const { t } = useTranslation();
  const overrideCount = ((_a = priceList.prices) == null ? void 0 : _a.length) || 0;
  const { color, text } = getPriceListStatus(t, priceList);
  const handleDelete = useDeletePriceListAction({ priceList });
  const type = priceList.type === "sale" ? t("priceLists.fields.type.options.sale.label") : t("priceLists.fields.type.options.override.label");
  return (0, import_jsx_runtime3.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime3.jsx)(Heading, { children: priceList.title }),
      (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center gap-x-4", children: [
        (0, import_jsx_runtime3.jsx)(StatusBadge, { color, children: text }),
        (0, import_jsx_runtime3.jsx)(
          ActionMenu,
          {
            groups: [
              {
                actions: [
                  {
                    label: t("actions.edit"),
                    to: "edit",
                    icon: (0, import_jsx_runtime3.jsx)(PencilSquare, {})
                  }
                ]
              },
              {
                actions: [
                  {
                    label: t("actions.delete"),
                    onClick: handleDelete,
                    icon: (0, import_jsx_runtime3.jsx)(Trash, {})
                  }
                ]
              }
            ]
          }
        )
      ] })
    ] }),
    (0, import_jsx_runtime3.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 items-center px-6 py-4", children: [
      (0, import_jsx_runtime3.jsx)(Text, { leading: "compact", size: "small", weight: "plus", children: t("fields.type") }),
      (0, import_jsx_runtime3.jsx)(Text, { size: "small", className: "text-pretty", children: type })
    ] }),
    (0, import_jsx_runtime3.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 items-center px-6 py-4", children: [
      (0, import_jsx_runtime3.jsx)(Text, { leading: "compact", size: "small", weight: "plus", children: t("fields.description") }),
      (0, import_jsx_runtime3.jsx)(Text, { size: "small", className: "text-pretty", children: priceList.description })
    ] }),
    (0, import_jsx_runtime3.jsxs)("div", { className: "text-ui-fg-subtle grid grid-cols-2 items-center px-6 py-4", children: [
      (0, import_jsx_runtime3.jsx)(Text, { leading: "compact", size: "small", weight: "plus", children: t("priceLists.fields.priceOverrides.label") }),
      (0, import_jsx_runtime3.jsx)(Text, { size: "small", className: "text-pretty", children: overrideCount || "-" })
    ] })
  ] });
};
var PAGE_SIZE = 10;
var PREFIX = "p";
var PriceListProductSection = ({
  priceList
}) => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const prompt = usePrompt();
  const [rowSelection, setRowSelection] = (0, import_react.useState)({});
  const { searchParams, raw } = useProductTableQuery({
    pageSize: PAGE_SIZE,
    prefix: PREFIX
  });
  const { products, count, isLoading, isError, error } = useProducts(
    {
      ...searchParams,
      price_list_id: [priceList.id]
    },
    {
      placeholderData: keepPreviousData
    }
  );
  const filters = useProductTableFilters();
  const columns = useColumns(priceList);
  const { mutateAsync } = usePriceListLinkProducts(priceList.id);
  const { table } = useDataTable({
    data: products || [],
    count,
    columns,
    enablePagination: true,
    enableRowSelection: true,
    pageSize: PAGE_SIZE,
    getRowId: (row) => row.id,
    rowSelection: {
      state: rowSelection,
      updater: setRowSelection
    },
    prefix: PREFIX
  });
  const handleDelete = async () => {
    const res = await prompt({
      title: t("general.areYouSure"),
      description: t("priceLists.products.delete.confirmation", {
        count: Object.keys(rowSelection).length
      }),
      confirmText: t("actions.delete"),
      cancelText: t("actions.cancel")
    });
    if (!res) {
      return;
    }
    mutateAsync(
      {
        remove: Object.keys(rowSelection)
      },
      {
        onSuccess: () => {
          toast.success(
            t("priceLists.products.delete.successToast", {
              count: Object.keys(rowSelection).length
            })
          );
          setRowSelection({});
        },
        onError: (e) => {
          toast.error(e.message);
        }
      }
    );
  };
  const handleEdit = async () => {
    const ids = Object.keys(rowSelection).join(",");
    navigate(`products/edit?ids[]=${ids}`);
  };
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime4.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime4.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime4.jsx)(Heading, { children: t("priceLists.products.header") }),
      (0, import_jsx_runtime4.jsx)(
        ActionMenu,
        {
          groups: [
            {
              actions: [
                {
                  label: t("priceLists.products.actions.addProducts"),
                  to: "products/add",
                  icon: (0, import_jsx_runtime4.jsx)(Plus, {})
                },
                {
                  label: t("priceLists.products.actions.editPrices"),
                  to: "products/edit",
                  icon: (0, import_jsx_runtime4.jsx)(PencilSquare, {})
                }
              ]
            }
          ]
        }
      )
    ] }),
    (0, import_jsx_runtime4.jsx)(
      _DataTable,
      {
        table,
        filters,
        columns,
        count,
        pageSize: PAGE_SIZE,
        isLoading,
        navigateTo: (row) => `/products/${row.original.id}`,
        orderBy: [
          { key: "title", label: t("fields.title") },
          { key: "created_at", label: t("fields.createdAt") },
          { key: "updated_at", label: t("fields.updatedAt") }
        ],
        commands: [
          {
            action: handleEdit,
            label: t("actions.edit"),
            shortcut: "e"
          },
          {
            action: handleDelete,
            label: t("actions.delete"),
            shortcut: "d"
          }
        ],
        pagination: true,
        search: true,
        prefix: PREFIX,
        queryObject: raw
      }
    )
  ] });
};
var ProductRowAction = ({
  product,
  priceList
}) => {
  const { t } = useTranslation();
  const prompt = usePrompt();
  const { mutateAsync } = usePriceListLinkProducts(priceList.id);
  const handleDelete = async () => {
    const res = await prompt({
      title: t("general.areYouSure"),
      description: t("priceLists.products.delete.confirmation", {
        count: 1
      }),
      confirmText: t("actions.delete"),
      cancelText: t("actions.cancel")
    });
    if (!res) {
      return;
    }
    mutateAsync(
      {
        remove: [product.id]
      },
      {
        onSuccess: () => {
          toast.success(
            t("priceLists.products.delete.successToast", {
              count: 1
            })
          );
        },
        onError: (e) => {
          toast.error(e.message);
        }
      }
    );
  };
  return (0, import_jsx_runtime4.jsx)(
    ActionMenu,
    {
      groups: [
        {
          actions: [
            {
              icon: (0, import_jsx_runtime4.jsx)(PencilSquare, {}),
              label: t("priceLists.products.actions.editPrices"),
              to: `products/edit?ids[]=${product.id}`
            }
          ]
        },
        {
          actions: [
            {
              icon: (0, import_jsx_runtime4.jsx)(Trash, {}),
              label: t("actions.remove"),
              onClick: handleDelete
            }
          ]
        }
      ]
    }
  );
};
var columnHelper = createColumnHelper();
var useColumns = (priceList) => {
  const base = useProductTableColumns();
  return (0, import_react.useMemo)(
    () => [
      columnHelper.display({
        id: "select",
        header: ({ table }) => {
          return (0, import_jsx_runtime4.jsx)(
            Checkbox,
            {
              checked: table.getIsSomePageRowsSelected() ? "indeterminate" : table.getIsAllPageRowsSelected(),
              onCheckedChange: (value) => table.toggleAllPageRowsSelected(!!value)
            }
          );
        },
        cell: ({ row }) => {
          return (0, import_jsx_runtime4.jsx)(
            Checkbox,
            {
              checked: row.getIsSelected(),
              onCheckedChange: (value) => row.toggleSelected(!!value),
              onClick: (e) => {
                e.stopPropagation();
              }
            }
          );
        }
      }),
      ...base,
      columnHelper.display({
        id: "actions",
        cell: ({ row }) => (0, import_jsx_runtime4.jsx)(ProductRowAction, { product: row.original, priceList })
      })
    ],
    [base, priceList]
  );
};
var PriceListDetails = () => {
  const { id } = useParams();
  const { price_list, isLoading, isError, error } = usePriceList(id);
  const { getWidgets } = useExtension();
  if (isLoading || !price_list) {
    return (0, import_jsx_runtime5.jsx)(TwoColumnPageSkeleton, { mainSections: 2, sidebarSections: 1, showJSON: true });
  }
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime5.jsxs)(
    TwoColumnPage,
    {
      widgets: {
        after: getWidgets("price_list.details.after"),
        before: getWidgets("price_list.details.before"),
        sideAfter: getWidgets("price_list.details.side.after"),
        sideBefore: getWidgets("price_list.details.side.before")
      },
      data: price_list,
      showJSON: true,
      children: [
        (0, import_jsx_runtime5.jsxs)(TwoColumnPage.Main, { children: [
          (0, import_jsx_runtime5.jsx)(PriceListGeneralSection, { priceList: price_list }),
          (0, import_jsx_runtime5.jsx)(PriceListProductSection, { priceList: price_list })
        ] }),
        (0, import_jsx_runtime5.jsx)(TwoColumnPage.Sidebar, { children: (0, import_jsx_runtime5.jsx)(PriceListConfigurationSection, { priceList: price_list }) })
      ]
    }
  );
};
export {
  PriceListDetailBreadcrumb as Breadcrumb,
  PriceListDetails as Component,
  pricingLoader as loader
};
//# sourceMappingURL=price-list-detail-DWUY4NRM-OPWPWSEC.js.map
